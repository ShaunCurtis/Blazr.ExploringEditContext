@implements IDisposable

@if (this.CascadedEditContext.IsModified())
{
    <div class="alert alert-danger">The Context has been modified.</div>
}

@code {
    [CascadingParameter] private EditContext CascadedEditContext { get; set; } = default!;

    private string ComponentId = Guid.NewGuid().ToString().Substring(0, 8);

    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        ArgumentNullException.ThrowIfNull(this.CascadedEditContext);
        return base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnInitialized()
    {
        this.CascadedEditContext.OnFieldChanged += this.OnFieldChanged;
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        Console.WriteLine($"{this.GetType().Name} - {ComponentId} => Validation state change");
        this.StateHasChanged();
    }

    public void Dispose()
    {
        this.CascadedEditContext.OnFieldChanged -= this.OnFieldChanged;
    }
}
